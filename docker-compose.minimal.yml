# ContratoRÃ¡pido - Minimal Local Development
# Core services only for Mac Mini M4

services:
  # PostgreSQL Database (n8n internal)
  postgresql:
    image: postgres:16-alpine
    platform: linux/arm64
    ports:
      - "5432:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=n8n
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Database (conversation data) - Simplified for local dev
  mongodb:
    image: mongo:7.0-jammy
    platform: linux/arm64
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=contratorapido
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  # MongoDB Setup (simplified for local dev)
  mongo-setup:
    image: mongo:7.0-jammy
    platform: linux/arm64
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongosh --host mongodb:27017 --eval "
      use contratorapido;
      db.createCollection('conversations');
      db.createCollection('rate_limits');  
      db.createCollection('message_log');
      db.createCollection('templates');
      print('MongoDB collections created successfully');
      "
    restart: "no"

  # Redis Cache & Queue
  redis:
    image: redis:7.2-alpine
    platform: linux/arm64
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis123 --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a redis123 ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Gotenberg PDF Service
  gotenberg:
    image: gotenberg/gotenberg:8
    platform: linux/arm64
    ports:
      - "3000:3000"
    command:
      - gotenberg
      - --api-timeout=30s
      - --chromium-disable-web-security
      - --chromium-allow-file-access-from-files
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # n8n Main Process
  n8n:
    image: docker.n8n.io/n8nio/n8n
    platform: linux/arm64
    ports:
      - "5678:5678"
    environment:
      # Database
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=postgres123
      - DB_POSTGRESDB_SCHEMA=public
      
      # Queue Mode
      - N8N_EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - QUEUE_BULL_REDIS_PASSWORD=redis123
      
      # URLs
      - WEBHOOK_URL=http://localhost:5678
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      
      # Settings
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      
      # Performance
      - N8N_PAYLOAD_DEFAULT_MAX_SIZE=16
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgresql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  n8n-data:
  postgresql-data:
  mongodb-data:
  redis-data: