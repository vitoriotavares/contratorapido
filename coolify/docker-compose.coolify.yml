version: '3.8'

# Coolify-optimized Docker Compose for ContratoRÃ¡pido
# Uses Coolify-specific environment variables and features

services:
  # Redis - Message Queue and Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - criador_contrato_network

  # MongoDB - Primary Database
  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=criador_contrato
    command: mongod --replSet rs0 --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - criador_contrato_network

  # MongoDB Replica Set Initializer
  mongodb-init:
    image: mongo:7
    container_name: mongodb-init
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    command: >
      mongosh --host mongodb:27017 --username ${MONGO_ROOT_USERNAME} --password ${MONGO_ROOT_PASSWORD} --eval "
        try {
          rs.status();
          print('Replica set already initialized');
        } catch (e) {
          print('Initializing replica set...');
          rs.initiate({
            _id: 'rs0',
            members: [{ _id: 0, host: 'mongodb:27017' }]
          });
          print('Replica set initialized');
        }
      "
    networks:
      - criador_contrato_network

  # Main Website - Static Files
  website:
    image: nginx:1.25-alpine
    container_name: website
    restart: unless-stopped
    volumes:
      - ./website:/usr/share/nginx/html:ro
      - ./coolify/nginx-website.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      # Coolify FQDN for main website
      - SERVICE_FQDN_WEBSITE=${SERVICE_FQDN_WEBSITE:-contratorapido.app.br}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - criador_contrato_network

  # n8n Main Process
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows:ro
    environment:
      # Coolify-specific FQDN configuration
      - SERVICE_FQDN_N8N_5678=${SERVICE_FQDN_N8N:-admin.contratorapido.app.br}
      - SERVICE_FQDN_WEBHOOK=/webhook
      
      # Queue Mode Configuration
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_BULL_REDIS_DB=0
      
      # Database Configuration
      - DB_TYPE=mongodb
      - DB_MONGODB_CONNECTION_URL=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/criador_contrato?replicaSet=rs0&authSource=admin
      
      # Authentication
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      
      # Coolify Integration
      - N8N_HOST=${SERVICE_FQDN_N8N:-admin.contratorapido.app.br}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=https://${SERVICE_FQDN_N8N:-admin.contratorapido.app.br}/
      - WEBHOOK_URL=https://${SERVICE_FQDN_WEBSITE:-contratorapido.app.br}
      
      # Security and Performance
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_SECURE_COOKIE=true
      - N8N_PAYLOAD_SIZE_MAX=32
      - QUEUE_RECOVERY_INTERVAL=30
      - N8N_LOG_LEVEL=warn
      - N8N_METRICS=true
      
      # External Services
      - GOTENBERG_URL=http://gotenberg:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # WhatsApp Configuration
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_WEBHOOK_SECRET=${WHATSAPP_WEBHOOK_SECRET}
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - criador_contrato_network

  # n8n Workers (Scaled for Coolify)
  n8n-worker-1:
    image: n8nio/n8n:latest
    container_name: n8n-worker-1
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n:ro
    environment:
      # Worker Configuration
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_BULL_REDIS_DB=0
      - DB_TYPE=mongodb
      - DB_MONGODB_CONNECTION_URL=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/criador_contrato?replicaSet=rs0&authSource=admin
      - N8N_WORKERS_MODE=execute
      - N8N_LOG_LEVEL=warn
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      
      # External Services
      - GOTENBERG_URL=http://gotenberg:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # WhatsApp Configuration
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_WEBHOOK_SECRET=${WHATSAPP_WEBHOOK_SECRET}
    command: n8n worker
    networks:
      - criador_contrato_network

  # Additional workers can be scaled in Coolify interface
  n8n-worker-2:
    image: n8nio/n8n:latest
    container_name: n8n-worker-2
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    volumes:
      - n8n_data:/home/node/.n8n:ro
    environment:
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD}
      - QUEUE_BULL_REDIS_DB=0
      - DB_TYPE=mongodb
      - DB_MONGODB_CONNECTION_URL=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/criador_contrato?replicaSet=rs0&authSource=admin
      - N8N_WORKERS_MODE=execute
      - N8N_LOG_LEVEL=warn
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - GOTENBERG_URL=http://gotenberg:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - WHATSAPP_WEBHOOK_SECRET=${WHATSAPP_WEBHOOK_SECRET}
    command: n8n worker
    networks:
      - criador_contrato_network

  # Gotenberg - PDF Generation Service
  gotenberg:
    image: gotenberg/gotenberg:8
    container_name: gotenberg
    restart: unless-stopped
    volumes:
      - gotenberg_tmp:/tmp
      - ./pdf-templates:/app/templates:ro
    environment:
      - GOTENBERG_API_PORT=3000
      - GOTENBERG_LOG_LEVEL=WARN
      - GOTENBERG_LOG_FORMAT=json
      - GOTENBERG_CHROMIUM_TIMEOUT=30s
      - GOTENBERG_CHROMIUM_MAX_QUEUE_SIZE=200
    command: >
      gotenberg
      --chromium-auto-start
      --chromium-max-queue-size=200
      --api-timeout=60s
      --log-level=WARN
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - criador_contrato_network

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  n8n_data:
    driver: local
  gotenberg_tmp:
    driver: local

networks:
  criador_contrato_network:
    driver: bridge