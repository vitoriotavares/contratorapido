# ContratoRÃ¡pido - Simplified Docker Compose for Coolify
# Removes authentication complexities for easier deployment

services:
  # n8n Workflow Engine
  n8n:
    image: docker.n8n.io/n8nio/n8n
    environment:
      # Coolify Service URLs
      - SERVICE_FQDN_N8N_5678
      - N8N_EDITOR_BASE_URL=https://admin.contratorapido.app.br
      - WEBHOOK_URL=https://api.contratorapido.app.br
      - N8N_HOST=admin.contratorapido.app.br
      
      # Timezone
      - 'GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-America/Sao_Paulo}'
      - 'TZ=${TZ:-America/Sao_Paulo}'
      
      # PostgreSQL Database (n8n metadata)
      - DB_TYPE=postgresdb
      - 'DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}'
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=$SERVICE_USER_POSTGRES
      - DB_POSTGRESDB_SCHEMA=public
      - DB_POSTGRESDB_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      
      # Queue Mode Configuration  
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      
      # Performance Settings
      - N8N_PAYLOAD_DEFAULT_MAX_SIZE=16
      - N8N_METRICS=true
      
      # Execution Settings
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - EXECUTIONS_TIMEOUT=1800
      - EXECUTIONS_TIMEOUT_MAX=3600
      
      # Security
      - N8N_SECURE_COOKIE=true
      
    volumes:
      - 'n8n-data:/home/node/.n8n'
    depends_on:
      - postgresql
      - mongodb
      - redis
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- http://127.0.0.1:5678/healthz || exit 1'
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database (n8n internal data)
  postgresql:
    image: 'postgres:16-alpine'
    volumes:
      - 'postgresql-data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_USER=$SERVICE_USER_POSTGRES
      - POSTGRES_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      - 'POSTGRES_DB=${POSTGRES_DB:-n8n}'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-n8n}'
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Database (simplified - no auth for development)
  mongodb:
    image: 'mongo:7.0-jammy'
    volumes:
      - 'mongodb-data:/data/db'
    environment:
      - MONGO_INITDB_DATABASE=contratorapido
    healthcheck:
      test:
        - CMD
        - mongosh
        - --eval
        - "db.adminCommand('ping')"
        - --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MongoDB Setup (create collections)
  mongo-setup:
    image: 'mongo:7.0-jammy'
    depends_on:
      - mongodb
    command: >
      mongosh --host mongodb:27017 --eval "
      use contratorapido;
      db.createCollection('conversations');
      db.createCollection('rate_limits');  
      db.createCollection('message_log');
      db.createCollection('templates');
      print('MongoDB collections created successfully');
      "
    restart: "no"

  # Redis Cache & Queue (simplified - no auth)
  redis:
    image: 'redis:7.2-alpine'
    command: 
      - redis-server
      - --appendonly yes
      - --maxmemory 512mb
      - --maxmemory-policy allkeys-lru
    volumes:
      - 'redis-data:/data'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Gotenberg PDF Generation Service
  gotenberg:
    image: 'gotenberg/gotenberg:8'
    command:
      - gotenberg
      - --api-timeout=30s
      - --chromium-disable-web-security
      - --chromium-allow-file-access-from-files
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:3000/health
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    tmpfs:
      - /tmp

  # n8n Worker Process (based on working example)
  n8n-worker:
    image: 'n8nio/n8n:latest'
    command: worker
    environment:
      # Queue Mode
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      
      # Database connection
      - DB_TYPE=postgresdb
      - 'DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}'
      - DB_POSTGRESDB_HOST=postgresql
      - DB_POSTGRESDB_USER=$SERVICE_USER_POSTGRES
      - DB_POSTGRESDB_SCHEMA=public
      - DB_POSTGRESDB_PASSWORD=$SERVICE_PASSWORD_POSTGRES
      
      # Worker settings
      - N8N_WORKER_ID=worker-contratorapido-1
      - QUEUE_BULL_SETTINGS_CONCURRENCY=5
      - 'NODE_OPTIONS="--max-old-space-size=512"'
      
      # Webhook URL (required for workers)
      - WEBHOOK_URL=https://api.contratorapido.app.br
      
      # Timezone
      - 'TZ=${TZ:-America/Sao_Paulo}'
      - 'GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-America/Sao_Paulo}'
      
      # Bull Queue Settings
      - QUEUE_BULL_SETTINGS_STALLEDINTERVAL=30000
      - QUEUE_BULL_SETTINGS_MAXSTALLEDCOUNT=3
      - EXECUTIONS_TIMEOUT=600
      
    volumes:
      - 'n8n-data:/home/node/.n8n'
    depends_on:
      - postgresql
      - redis
      - n8n
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - "ps aux | grep '[w]orker' || exit 1"
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

# Named Volumes
volumes:
  n8n-data:
    driver: local
  postgresql-data:
    driver: local
  mongodb-data:
    driver: local
  redis-data:
    driver: local